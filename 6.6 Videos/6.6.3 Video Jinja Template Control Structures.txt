-> Implementing Conditional Rendering and Loops in Jinja Templates
    -> Overview of Conditional Rendering
        -> The goal is to display different content based on whether the user is signed in or not
        -> Reuse the `user.html` template to demonstrate conditional rendering
        -> For this example, simulate the sign-in process to conditionally render content
        -> Jinja's conditional rendering is similar to Python's `if` statements but uses its own syntax for control structures

    -> Jinja Control Structures
        -> Jinja control structures use curly braces `{}` with a percent symbol `%`
        -> Control structures are written as `{% if condition %}` to start and `{% endif %}` to end the block
        -> This structure is used for conditional logic, loops, and other control flows
        -> The key difference from Python's `if` statements is that Jinja uses a different syntax for control flow and template logic

    -> Writing Conditionals in Jinja
        -> In Jinja, use `{% if variable %}` to check if a variable is defined or has a specific value
        -> Example: `{% if username %}` checks if the `username` variable is present in the template
        -> If the condition is true, content inside the block will be rendered, such as a personalised greeting
        -> If the condition is false (e.g., `username` is not defined), alternative content can be rendered using `{% else %}`

    -> Rendering Based on Variable Existence
        -> The condition `{% if username %}` checks if the `username` exists or is not `None`
        -> If true, Jinja will render the greeting message with the username (e.g., "Hello, Tim!")
        -> If false, the template will render a different message for anonymous users (e.g., "Hello, Guest!")
        -> The syntax `{% endif %}` is used to close the conditional block, ensuring proper structure and logic flow

    -> Simulation of a Signed-Out User
        -> Save the changes to the template and reload the Flask app to test
        -> To simulate a signed-out user, remove the `username` variable from the `render_template` call in the route function
        -> When `username` is not passed to the template, the condition `{% if username %}` will evaluate to false, and the "Hello, Guest!" message will be displayed
        -> Once the `username` is added back into the `render_template` call, the personalised greeting will appear, showing the user’s name

    -> Using Loops in Jinja Templates
        -> Loops are used to dynamically render lists or collections of data in a template
        -> In this example, the goal is to display a list of songs using a loop
        -> Instead of hardcoding each song manually, a loop allows you to iterate through a list of songs and render each item dynamically

    -> Creating the `songs.html` Template
        -> Create a new template called `songs.html` to render the list of songs
        -> Define the route `/songs` in Flask to render this new template
        -> In your route function, pass the list of songs as a variable to the template
        -> The list could start with one song and later grow to include more songs

    -> Rendering a Song with a Placeholder
        -> In the `songs.html` template, you can use placeholders like `{{ songs[0] }}` to render the first element of the list
        -> Placeholders allow you to insert dynamic content into the HTML (e.g., the first song in the list)
        -> Test by navigating to `/songs` to verify that the first song is rendered

    -> Rendering Lists with Loops
        -> Instead of manually referencing each song, use a loop to dynamically generate list items
        -> The loop starts with `{% for song in songs %}` and ends with `{% endfor %}`
        -> Inside the loop, you can render each song from the list one by one
        -> Jinja provides a simple and readable syntax for looping through data structures like lists or dictionaries

    -> Wrapping the Loop in HTML
        -> To display the songs in an unordered list, wrap the loop in `<ul>` tags
        -> For each song, use the `<li>` tags to display each song as a list item in the HTML
        -> Example:
            ```html
            <ul>
                {% for song in songs %}
                    <li>{{ song }}</li>
                {% endfor %}
            </ul>
            ```
        -> This generates a dynamic list where each song is displayed as a list item on the webpage

    -> Testing Dynamic List Rendering
        -> Go to your browser and refresh the `/songs` route
        -> You should now see a dynamically rendered list of songs displayed on the page
        -> The power of Jinja loops is evident because you no longer need to hardcode each song individually
        -> This is particularly useful when you have a large amount of data or when the data is fetched dynamically from a database

    -> Conclusion on Jinja Loops and Conditionals
        -> Jinja’s control structures (conditionals and loops) are essential tools for rendering dynamic content in Flask templates
        -> Conditionals allow you to show different content based on the data passed to the template, such as user login status
        -> Loops make it easy to dynamically render collections of items like song lists, user lists, or any data
        -> These tools allow you to write cleaner, more flexible templates, making your Flask applications more dynamic and maintainable
